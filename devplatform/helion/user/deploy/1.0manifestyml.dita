<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" ><topic xml:lang="en-us" id="topic20805">
<title>HPE Helion 1.0 Development Platform: Manifest.yml Options</title>
<prolog>
<metadata>
<othermeta name="layout" content="default"/>
</metadata>
</prolog>
<body>
<p>
<!--PUBLISHED-->
 <!--./devplatform/helion/user/deploy/1.0manifestyml.md-->
 <!--permalink: /als/v1/user/deploy/manifestyml/--></p>
<p>

</p>
<p>Using a <i>manifest.yml</i> file is the standard configuration file format for all
Cloud Foundry systems, allowing for portability from those systems to
Application Lifecycle Service without configuration changes.</p>
<p>The client uses the keys to determine values
that are otherwise passed by the user as arguments or as answers to
prompts.</p>
<p>
  <xref type="section" href="#topic20805/name">name:</xref>
</p>
<ul>
<li>
<p>
<xref type="section" href="#topic20805/applications">applications</xref>
</p>

<ul>
<li>
<xref type="section" href="#topic20805/depends-on">depends-on</xref>
</li>
<li>
<xref type="section" href="#topic20805/helion">helion</xref>
</li>
</ul>
</li>
<li>
<p>
<xref type="section" href="#topic20805/buildpack">buildpack:</xref>
</p>

<ul>
<li>
<xref type="section" href="#topic20805/framework">framework:</xref>

<ul>
<li>
<xref type="section" href="#topic20805/type">type:</xref>
</li>
<li>
<xref type="section" href="#topic20805/runtime">runtime:</xref>
</li>
<li>
<xref type="section" href="#topic20805/document-root">document-root:</xref>
</li>
<li>
<xref type="section" href="#topic20805/start-file">start-file:</xref>
</li>
</ul>
</li>
<li>
<xref type="section" href="#topic20805/app-dir">app-dir</xref>
</li>
<li>
<xref type="section" href="#topic20805/services">services:</xref>
</li>
<li>
<xref type="section" href="#topic20805/requirements">requirements:</xref>

<ul>
<li>
<xref type="section" href="#topic20805/os-packages">OS Packages</xref>
</li>
<li>
<xref type="section" href="#topic20805/language-modules">Language Modules</xref>
</li>
</ul>
</li>
<li>
<xref type="section" href="#topic20805/mem">mem:</xref>
</li>
<li>
<xref type="section" href="#topic20805/disk">disk:</xref>
</li>
<li>
<xref type="section" href="#topic20805/instances">instances:</xref>
</li>
<li>
<xref type="section" href="#topic20805/url-or-urls">url (or urls):</xref>
</li>
<li>
<xref type="section" href="#topic20805/env">env:</xref>

<ul>
<li>
<xref type="section" href="#topic20805/env-attributes">env Attributes</xref>
</li>
</ul>
</li>
<li>
<xref type="section" href="#topic20805/processes">processes:</xref>

<ul>
<li>
<xref type="section" href="#topic20805/web">web:</xref>
</li>
</ul>
</li>
<li>
<xref type="section" href="#topic20805/command">command:</xref>
</li>
<li>
<xref type="section" href="#topic20805/cron">cron:</xref>
</li>
<li>
<xref type="section" href="#topic20805/ignores">ignores:</xref>
</li>
<li>
<xref type="section" href="#topic20805/inherit">inherit:</xref>
</li>
<li>
<xref type="section" href="#topic20805/hooks">hooks:</xref>

<ul>
<li>
<xref type="section" href="#topic20805/pre-push">pre-push:</xref>
</li>
<li>
<xref type="section" href="#topic20805/pre-staging">pre-staging:</xref>
</li>
<li>
<xref type="section" href="#topic20805/post-staging">post-staging:</xref>
</li>
<li>
<xref type="section" href="#topic20805/pre-running">pre-running:</xref>
</li>
</ul>
</li>
<li>
<xref type="section" href="#topic20805/drain">drain:</xref>
</li>
<li>
<xref type="section" href="#topic20805/min-version">min_version:</xref>

<ul>
<li>
<xref type="section" href="#topic20805/client">client:</xref>
</li>
<li>
<xref type="section" href="#topic20805/server">server:</xref>
</li>
</ul>
</li>
<li>
<xref type="section" href="#topic20805/key-substitution">Key Substitution</xref>
</li>
</ul>
</li>
</ul>
<section id="applications"> <title>applications:</title>
<p>This key contains a list of options corresponding to individual apps to
be pushed. Each sub-key should match the name of folders where the files
for each app are contained. For example:</p>
<codeblock>
  <codeph>applications:
  web:
    name: springweb
    framework:
      name: spring
    instances: 1
    mem: 512
  worker:
    name: springweb-helper
    framework:
      name: node
    instances: 1
    mem: 64
</codeph>
</codeblock>
<p>Here the two keys <codeph>web:</codeph> and <codeph>worker:</codeph> match subdirectories (named <codeph>web</codeph> and
<codeph>worker</codeph>) of the directory containing the
<i>manifest.yml</i> file.</p>
<p>The shortcut "." can be used if the application code is in the top level
directory along with the <i>manifest.yml</i> file:</p>
<codeblock>
  <codeph>applications:
  .:
    name: singleapp
    framework:
      name: spring
    instances: 1
    mem: 512
</codeph>
</codeblock>
</section>
<section id="depends-on"> <title>depends-on:</title>
<p>When deploying multiple applications from a single <i>manifest.yml</i> use
the <codeph>depends-on:</codeph> key to set the order in which the
apps are started and stopped. An app with the <codeph>depends-on:</codeph> option will be pushed only after the listed apps have been
pushed and are running on the server.</p>
<p>In the previous example, if you wanted to ensure that <codeph>web</codeph> was started before <codeph>worker</codeph>, you would add
<codeph>depends-on: worker</codeph> in the <codeph>web:</codeph> section:</p>
<codeblock>
  <codeph>applications:
  web:
    depends-on: worker
    name: springweb
    framework:
      name: spring
    instances: 1
    mem: 512
  worker:
    name: springweb-helper
    framework:
      name: node
    instances: 1
    mem: 64
</codeph>
</codeblock>
<p>If an app is stopped or restarted, the process happens in the reverse
order.</p>
</section>
<section id="helion"> <title>helion:</title>
<p>The following Application Lifecycle Service-specific options need to be placed in a
<codeph>helion:</codeph> block within the application block.</p>
<ul>
<li>processes:</li>
<li>min_version:</li>
<li>env:</li>
<li>ignores:</li>
<li>hooks:</li>
<li>cron:</li>
<li>requirements</li>
</ul>
<p>For example:</p>
<codeblock>
  <codeph>applications:
  .:
    name: celery-demo
    framework:
      name: python
      runtime: python27
    mem: 128
    helion:
      env:
        CELERY_ENV:
          default: crisper
      processes:
        web: celeryd
      requirements:
        pypm: [celery]
      hooks:
        pre-running:
          - sudo cp $HOME/fstab /etc/fstab
          - sudo mount /dev/shm
      min_version:
        server: 0.9.0.143
        client: 1.0
</codeph>
</codeblock>
<p>Configuration options for Application Lifecycle Service applications can be stored in a
<i>manifest.yml</i> file in the top-level application directory.</p>
<p>The <i>manifest.yml</i> file defines <b>keys</b> and associated <b>values</b> which
the <codeph>helion</codeph> client uses to set options that are
otherwise passed by the user as command arguments or answers to prompts.
Other values are used by the server to install needed packages, or run
setup scripts during the staging, post-staging, or pre-running steps in
deployment.</p>
<p>
<xref type="section" href="#topic20805/key-substitution">
<i>Key substitution</i>
</xref> can be used to
insert values from one key into another.</p>
<p>The following sections describe the available keys and the values that
can be assigned to them:</p>
</section>
<section id="name"> <title>name:</title>
<p>This is the name of the application being pushed. If not specified, the
user will be prompted during <codeph>helion push</codeph> to
provide a name. The name can also be specified on the command line (eg.
<codeph>helion push currency-converter</codeph>).</p>
<p>Example:</p>
<codeblock>
  <codeph>name: currency-converter
</codeph>
</codeblock>
<p>
  <b>Note</b>
</p>
<p>The application name must be a valid <xref href="http://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names" type="section" scope="external" format="html" >hostname
label</xref>
(i.e. containing only alphanumeric characters and hyphens).</p>
</section>
<section id="buildpack"> <title>buildpack:</title>
<p>The Git repository URL for the specific
<xref href="../../../../devplatform/helion/user/deploy/1.0buildpack.dita#buildpacks" type="section"  >
<i>buildpack</i>
</xref> used to deploy the application.
For example:</p>
<codeblock>
  <codeph>name: java-app
mem: 512M
buildpack: https://github.com/heroku/heroku-buildpack-java.git
</codeph>
</codeblock>
<p>If unset, Application Lifecycle Service will check to see if the application triggers the
<codeph>detect</codeph> scripts in any of its <xref href="../../../../devplatform/helion/user/deploy/1.0buildpack.dita#buildpacks-built-in" type="section"  >
<i>built-in
buildpacks</i>
</xref>.</p>
</section>
<section id="framework"> <title>framework:</title>
<p>Allows the app to specify a framework and runtime to be used. Specifying
a value for the <codeph>framework</codeph> key triggers the use of
the <xref href="../../../../devplatform/helion/user/deploy/1.0buildpack.dita#buildpacks-legacy" type="section"  >
<i>Legacy Buildpack</i>
</xref>.</p>
<p>
  <b>Note</b>
</p>
<p>The keys in the <codeph>framework</codeph> section are used with
the <xref href="../../../../devplatform/helion/user/deploy/1.0buildpack.dita#buildpacks-legacy" type="section"  >
<i>Legacy Buildpack</i>
</xref> only.
Applications using language or framework-specific buildpacks do not
require these values, and should instead specify the
<xref type="section" href="#topic20805/yml-buildpack">
<i>buildpack</i>
</xref> or rely on the detection scripts
of the <xref href="../../../../devplatform/helion/user/deploy/1.0buildpack.dita#buildpacks-built-in" type="section"  >
<i>built-in buildpacks</i>
</xref>.</p>
</section>
<section id="type"> <title>type:</title>
<p>The framework to use. Check <codeph>helion frameworks</codeph>
for a complete list of available frameworks. If not specified, user may
be prompted during <codeph>helion push</codeph>. Can also be
input with the command line option --framework, -f (eg.
<codeph>helion push --framework python</codeph>).</p>
</section>
<section id="runtime"> <title>runtime:</title>
<p>The runtime to use. Check <codeph>helion runtimes</codeph> for a
complete list of available runtimes. If not specified, server will
select the best option based on available data. Can also be input with
the command line option --runtime, -f (eg.
<codeph>helion push --runtime python32</codeph>).</p>
<p>Example:</p>
<codeblock>
  <codeph>framework:
  type: python
  runtime: python32
</codeph>
</codeblock>
</section>
<section id="document-root"> <title>document-root:</title>
<p>Overrides the default document-root setting (\$HOME) for the web server.</p>
<p>
  <b>Note</b>
</p>
<p>Node.js, Perl, PHP and Python frameworks only.</p>
<p>Setting a deeper document root directory avoids the problem of exposing
supporting files (e.g. <i>manifest.yml</i>) over HTTP.</p>
<p>Example:</p>
<codeblock>
  <codeph>framework:
  type: php
  document-root: web
</codeph>
</codeblock>
<p>The document-root must always be specified relative to \$HOME
(/home/helion/app).</p>
</section>
<section id="start-file"> <title>start-file:</title>
<p>Set the main application filename.</p>
<p>
  <b>Note</b>
</p>
<p>Perl and Python frameworks only.</p>
<p>If your application does not use a conventional filename (e.g. app.psgi
for Perl, wsgi.py for Python) using this option, possibly in conjunction
with <b>document-root</b>, avoids the need to refactor the application for
Application Lifecycle Service. For example:</p>
<codeblock>
  <codeph>framework:
  start-file: temp.psgi
</codeph>
</codeblock>
<p>Or:</p>
<codeblock>
  <codeph>framework:
  start-file: temp.py
</codeph>
</codeblock>
<p>This value will be used by the
<xref href="../../../../devplatform/helion/user/reference/1.0environment.dita#term-processes-web" type="section"  >
<i>PROCESSES_WEB</i>
</xref> and
HELION_START_FILE environment variables. Any changes to
HELION_START_FILE at runtime will not change the value of
<xref href="../../../../devplatform/helion/user/reference/1.0environment.dita#term-processes-web" type="section"  >
<i>PROCESSES_WEB</i>
</xref> as
the macro is expanded before the pre-running hooks are run.</p>
</section>
<section id="app-dir"> <title>app-dir</title>
<p>The directory containing the application code to be pushed to Application Lifecycle Service
(if it's not in the top-level directory). This directory becomes the
\$HOME directory of the application when the application is pushed to
Application Lifecycle Service. For example, Java applications will often have a 'target'
sub-directory containing the output of ant or mvn builds:</p>
<codeblock>
  <codeph>name: sample
framework:
  type: java_web
  runtime: java7
app-dir: target
</codeph>
</codeblock>
<p>If required, you can also set
<xref type="section" href="#topic20805/yml-document-root">
<i>document-root</i>
</xref> in the
<xref type="section" href="#topic20805/yml-framework">
<i>framework</i>
</xref> section to specify a
sub-directory of the application \$HOME to be used as the document root.</p>
<p>To launch multiple applications from multiple sub-directories use a
<xref href="../../../../devplatform/helion/user/deploy/1.0manifestyml.dita#manifest-yml" type="section"  >
<i>manifest.yml</i>
</xref> file.</p>
</section>
<section id="services"> <title>services:</title>
<p>A list of services to create and bind to the application. Each sub key
is the name of the service to create / bind, and the associated value is
the type of the new service. If multiple services of the same type are
needed, list them on separate lines as in the example below.</p>
<p>Use <codeph>helion services</codeph> for a complete list of
available services. If not specified, the user may be prompted during
<codeph>helion push</codeph>.</p>
<p>Example:</p>
<codeblock>
  <codeph>services:
  customerdb: mysql
  paymentsdb: mysql
</codeph>
</codeblock>
<p>The Application Lifecycle Service client supports <xref type="section" href="#topic20805/yml-key-substitution">
<i>key
substitution</i>
</xref> for service names,
allowing you to create service names based on the specified application
name. For example:</p>
<codeblock>
  <codeph>services:
  ${name}-db: mysql
</codeph>
</codeblock>
<p>The application name can be set as an option to the <xref href="../../../../devplatform/helion/user/reference/1.0client-ref.dita#command-push" type="section"  >
<i>helion
push</i>
</xref> command, overriding
the <b>name</b> value defined in <i>manifest.yml</i>. Use this technique when
pushing multiple versions of the same application (using different
names) if you want them to use separate databases. For example:</p>
<codeblock>
  <codeph>name: sample

framework:
  type: node

services:
  ${name}-db: mysql
</codeph>
</codeblock>
<p>Using the name specified in <i>manifest.yml</i>, a data service is created to
match that name:</p>
<codeblock>
  <codeph>$ helion push -n
Pushing application 'sample'...
Framework:       node
Runtime:         &lt;framework-specific default&gt;
Application Url: sample.helion-pjw3.local
Creating Application [sample]: OK
Binding service [sample-db]: OK
...
Starting Application [sample]: ...OK
</codeph>
</codeblock>
<p>If you specify a new name for the application as an argument to
<codeph>helion push</codeph>, a new service with a matching name
is created rather than binding to the existing 'sample-db' service:</p>
<codeblock>
  <codeph>$ helion push sample-2 -n
Pushing application 'sample-2'...
Framework:       node
Runtime:         &lt;framework-specific default&gt;
Application Url: sample-2.helion-pjw3.local
Creating Application [sample-2]: OK
Binding service [sample-2-db]: OK
...
Starting Application [sample-2]: ..OK

$ helion apps

+-------------+---+---------+------------------------------+-------------+
| Application | # | Health  | URLS                         | Services    |
+-------------+---+---------+------------------------------+-------------+
| sample      | 1 | RUNNING | sample.helion-pjw3.local   | sample-db   |
| sample-2    | 1 | RUNNING | sample-2.helion-pjw3.local | sample-2-db |
+-------------+---+---------+------------------------------+-------------+
</codeph>
</codeblock>
</section>
<section id="requirements"> <title>requirements:</title>
<p>Specifies required modules, and allows the installation of additional OS
packages.</p>
</section>
<section id="os-packages"> <title>OS Packages</title>
<p>OS packages can be added in an <codeph>ubuntu:</codeph> block
within a <codeph>staging:</codeph> and/or <codeph>running:</codeph> block. Plain strings are treated as package names:</p>
<codeblock>
  <codeph>requirements:
  staging:
    ubuntu:
      - libfoo-dev
  running:
    ubuntu:
      - libfoo
      - some-app
</codeph>
</codeblock>
<p>To add the OS requirements to both the staging and running phases add
the <codeph>ubuntu:</codeph> block directly beneath the
<codeph>requirements:</codeph> key:</p>
<codeblock>
  <codeph>requirements:
  ubuntu:
    - libfoo-dev
</codeph>
</codeblock>
<p>If your account has been given sudo privileges in application
containers, you can use arrays to add additional repositories,
overriding repository restrictions set by admins.</p>
<p>Example:</p>
<codeblock>
  <codeph>requirements:
  staging:
    ubuntu:
      - ["ppa:gophers/go"]
      - golang-stable
  running:
    ubuntu:
      - libfoo
</codeph>
</codeblock>
</section>
<section id="language-modules"> <title>Language Modules</title>
<p>For the installation of language modules, replace the
<i>requirements.txt</i> file. For Python, <codeph>pypm:</codeph> and <codeph>pip:</codeph> can be specified:</p>
<codeblock>
  <codeph>requirements:
  pypm:
    - tornado
    - pymongo
  pip:
    - pycurl
</codeph>
</codeblock>
<p>For Perl, <codeph>ppm:</codeph> or <codeph>cpan:</codeph> can be specified:</p>
<codeblock>
  <codeph>requirements:
  ppm:
    - CGI::Application::PSGI
    - Plack::Builder

requirements:
  cpan:
    - CGI::Application::PSGI
    - Plack::Builder
</codeph>
</codeblock>
</section>
<section id="mem"> <title>mem:</title>
<p>The amount of memory to allocate for the application.</p>
<p>Syntax: \&lt;int&gt; or \&lt;int&gt;M - Memory in megabytes. eg. 256M</p>
<p>Syntax: \&lt;int&gt;G or \&lt;float&gt;G - Memory in gigabytes. eg. 1.5G or 2G</p>
<p>If not specified, user may be prompted during <codeph>helion push</codeph>. Can also be specified on the command line (eg.
<codeph>helion push --mem 256M</codeph>).</p>
<p>Example:</p>
<codeblock>
  <codeph>mem: 64M
</codeph>
</codeblock>
</section>
<section id="disk"> <title>disk:</title>
<p>The amount of disk space to allocate for the application (minimum
512MB).</p>
<p>Syntax: \&lt;int&gt; or \&lt;int&gt;M - Disk in megabytes. eg. 768M</p>
<p>Syntax: \&lt;int&gt;G or \&lt;float&gt;G - Disk in gigabytes. eg. 1.5G or 2G</p>
<p>If not specified, 2GB of disk space is allocated. Can also be specified
on the command line (eg. <codeph>helion push --disk 768M</codeph>).</p>
<p>Example:</p>
<codeblock>
  <codeph>mem: 3.5GB
</codeph>
</codeblock>
</section>
<section id="instances"> <title>instances:</title>
<p>The number of instances to allocate for the application. If not
specified, defaults to 1. Can be specified on the command line (eg.
<codeph>helion push --instances 2</codeph>).</p>
<p>Example:</p>
<codeblock>
  <codeph>instances: 2
</codeph>
</codeblock>
</section>
<section id="url-or-urls"> <title>url (or urls):</title>
<p>List of URLs mapped to the application. For example:</p>
<codeblock>
  <codeph>name: cms-platform

url:
  - blog.example.org
  - exampleblog.com
</codeph>
</codeblock>
<p>With this key specified, Application Lifecycle Service will not assign a default
"appname.paasname.com" URL to the application. If you would like this
URL assigned as well, add <codeph>${name}.${target-base}</codeph>
to the list of URLs.</p>
<p>See <xref href="1.0index.dita#topic15975" type="section" ><i>Mapping App URLs</i></xref> for more
        information.</p>
</section>
<section id="env"> <title>env:</title>
<p>A map of environment variables to initialize for the application. Each
subkey is the name of the variable, with an associated value.</p>
<p>Example:</p>
<codeblock>
  <codeph>env:
  HOME_IP_ADDRESS: 127.0.0.1
</codeph>
</codeblock>
<p>Avoid using this for values which should not be stored in plain text,
such as API keys and passwords.</p>
</section>
<section id="env-attributes"> <title>env Attributes</title>
<p>Each environment variable can have attributes which modify the
interactive behavior of the <xref href="../../../../devplatform/helion/user/reference/1.0client-ref.dita#command-ref-client" type="section"  >
<i>helion
client</i>
</xref> when using the
<xref href="../../../../devplatform/helion/user/reference/1.0client-ref.dita#command-push" type="section"  >
<i>push</i>
</xref> command. These
attributes are set with the following keys:</p>
<ul>
<li>
<b>default</b> (string): The value to use if nothing is entered by the
user interactively (no default).</li>
<li>
<b>required</b> (<xref href="http://yaml.org/type/bool.html" scope="external" format="html" >boolean</xref>): If set,
the variable must have a value (defaults to "false" == "not
required").</li>
<li>
<b>inherit</b> (boolean): If set, the client looks in the local
environment for a variable of the same name and takes its value
(defaults to "false" == "no inheritance").</li>
<li>
<b>prompt</b> (string): The prompt to show when the client asks for the
variable value (Defaults to "Enter \&lt;varname&gt;:").</li>
<li>
<b>choices</b> (list of strings): If specified, a list of legal values
for the variable, to be presented to the user as a menu rather than
prompting for a string (no default).</li>
</ul>
<p>For example:</p>
<codeblock>
  <codeph>env:
  MY_SPECIAL_VAR:
    default: "development"
    required: y
    inherit: y
    prompt: "What type of deployment?: "
    choices:
      - "development"
      - "testing"
      - "staging"
      - "production"
</codeph>
</codeblock>
<p>Pushing with the <codeph>--no-prompt</codeph> option will fail with
the error message "Required variable <i>VAR_NAME</i> not set" if "required"
is set but no value is given (via "default", "inherit" or the
<codeph>--env</codeph> option).</p>
<p>
  <b>Note</b>
</p>
<p>These attributes are only recognized by the <xref href="../../../../devplatform/helion/user/reference/1.0client-ref.dita#command-ref-client" type="section"  >
<i>Helion
client</i>
</xref>.</p>
</section>
<section id="processes"> <title>processes:</title>
</section>
<section id="web"> <title>web:</title>
<p>
  <b>Note</b>
</p>
<p>Used with the <xref href="../../../../devplatform/helion/user/deploy/1.0buildpack.dita#buildpacks-legacy" type="section"  >
<i>Legacy buildpack</i>
</xref>
only. When using other buildpacks, create a
<xref href="https://devcenter.heroku.com/articles/procfile" scope="external" format="html" >Procfile</xref> in the
application's root directory.</p>
<p>Specify a custom command to launch your web application or to pass
custom arguments to uWSGI. For example:</p>
<codeblock>
  <codeph>processes:
  web: python3.2 app.py
</codeph>
</codeblock>
<p>This key is required when using the
<xref href="../../../../devplatform/helion/user/deploy/1.0other-frameworks.dita#generic-framework" type="section"  >
<i>generic</i>
</xref> framework, but is
optionally available for all other frameworks.</p>
<p>
<b>If defined</b>, this process is expected to launch a HTTP server bound
to <codeph>0.0.0.0</codeph> host and <codeph>$PORT</codeph>
port.</p>
<p>
<b>If set to Null ("\~")</b>, the application is treated as a worker
application and not provisioned with a URL. For example, an application
that just runs a background Perl script might look like this:</p>
<codeblock>
  <codeph>name: perlwork
framework:
  type: perl
command: perl worker.pl
processes:
  web: ~
</codeph>
</codeblock>
<p>A 'command:' value must be present for worker applications.</p>
<p>If the application exists solely to run commands via  <xref type="section"
          href="#topic20805/yml-cron">
          <i>cron</i>
        </xref>, a dummy command such as '<i>sleep 365d</i>' should be specified.</p>
<p>The <codeph>$PROCESSES_WEB</codeph> and <codeph>$HELION_UWSGI</codeph> variables can also be used with <codeph>processes: web:</codeph>.</p>
<p>
<codeph>$PROCESSES_WEB</codeph> contains the command that is used
to start the web application, if you want to override the default
command.</p>
<p>
<codeph>$HELION_UWSGI</codeph> is defined for runtimes using
uWSGI (Perl and Python), and it contains the command to start uWSGI with
all relevant options. It can be used if you are appending additional
uWSGI options to the command.</p>
</section>
<section id="command"> <title>command:</title>
<p>Used for worker applications to start a background process. Below is an
example using the
<xref href="../../../../devplatform/helion/user/deploy/1.0other-frameworks.dita#standalone-framework" type="section"  >
<i>standalone</i>
</xref> framework:</p>
<codeblock>
  <codeph>name: helion-worker
instances: 1
framework:
  type: standalone
  runtime: ruby18
command: ruby worker.rb
</codeph>
</codeblock>
</section>
<section id="cron"> <title>cron:</title>
<p>Commands listed here are added to the crontab file.</p>
<p>Example:</p>
<codeblock>
  <codeph>cron:
  - PLUGH=xyzzy
  - "*/1 * * * * env &gt; $HOME/env"
</codeph>
</codeblock>
</section>
<section id="ignores"> <title>ignores:</title>
<p>A list of .gitignore-style patterns. Files and directories in the
application directory matching at least one pattern are ignored during
"push" and "update".</p>
<p>Example:</p>
<codeblock>
  <codeph>ignores: ["tmp", ".git"]
</codeph>
</codeblock>
<p>To include all hidden files or folders simply use an empty list.</p>
<p>Example:</p>
<codeblock>
  <codeph>ignores: []
</codeph>
</codeblock>
<p>If not specified, a default list is used to exclude files and folders
not typically required in a deployed application (e.g. the dot files and
folders of various source code control systems).</p>
<p>The default list contains the following: \~*/, .git/, *.svn/, *.hg/,
*CVS/, _FOSSIL_.fos, *.bzr, *.cdv, *.pc, *RCS, *SCCS,*_MTN,
*_build, *_darcs, *_sgbak, *autom4te.cache, *blib, *cover_db,
*\~.dep, *\~.dot, *\~.nib, *\~.plst</p>
</section>
<section id="inherit"> <title>inherit:</title>
<p>This special key has the effect of treating its value as the name of a
file to be included into <i>manifest.yml</i>.</p>
<p>Example:</p>
<p>
<i>parent.yml</i>:</p>
<codeblock>
  <codeph>env:
  COMPANY: The ABC Company
</codeph>
</codeblock>
<p>
<i>manifest.yml</i>:</p>
<codeblock>
  <codeph>name: example-app
inherit: parent.yml
mem: 64M
</codeph>
</codeblock>
<p>effect from processing:</p>
<codeblock>
  <codeph>name: example-app
env:
  COMPANY: The ABC Company
mem: 64M
</codeph>
</codeblock>
</section>
<section id="hooks"> <title>hooks:</title>
<p>Hooks are commands that are run at various point of the staging and
running process of an app.</p>
</section>
<section id="pre-push"> <title>pre-push:</title>
<p>Commands run <b>on the local system</b> before pushing the code to
Application Lifecycle Service. This can be useful for building source files (e.g. with
<codeph>make</codeph>) or performing configuration steps that need
to be done on the local system before the application code can be
pushed. Commands are executed between application creation (when the URL
and application resources are reserved) and the actual upload of the
local code.</p>
<p>The client will set the HELION_HOOK_ACTION variable to "create" if
the application is new, or "update" if it detects the application
already exists. You can use this variable to run hooks differently in
either context.</p>
</section>
<section id="pre-staging"> <title>pre-staging:</title>
<p>A list of commands to be run in the root of the app's directory before
the staging process is started. The commands are only run a single time
on push or update.</p>
</section>
<section id="post-staging"> <title>post-staging:</title>
<p>A list of commands to be run in the root of the app's directory after
the staging process is complete. The commands are only run a single time
on push or update.</p>
</section>
<section id="pre-running"> <title>pre-running:</title>
<p>A list of commands to be run in the root of the app's directory after
staging is complete and before the app is started. The commands are run
sequentially, in the order listed, each time an app is started or
restarted.</p>
<p>Example:</p>
<codeblock>
  <codeph>hooks:
  pre-staging:
    - python prestagingsetup.py
  post-staging:
    - python manage.py syncdb --noinput
    - python manage.py migrate --noinput
  pre-running:
  - python prerunsetup.py
</codeph>
</codeblock>
<p>Hook processing ends and staging aborts if a command returns a nonzero
exit status (i.e. if the command fails). You can suppress this behavior
by prefacing the command with "-" to force staging to proceed despite
failures. The "-" must be included in a quoted command string. For
example:</p>
<codeblock>
  <codeph>hooks:
  post-staging:
    - "-python manage.py syncdb --noinput"
</codeph>
</codeblock>
<p>Commands used in the <codeph>hooks:</codeph> keys may not include
shell metacharacters, such as "&amp;&amp;" for combining commands, "#" for
comments, "\&lt;", "&gt;" or "|" for I/O redirection.</p>
<p>If you need shell functionality such as metacharacters, signal trapping,
or forcing zero exit status, wrap your command in a <i>script.sh</i> file and
use <codeph>sh +x script.sh</codeph> as your hook command.</p>
<p>Also note that if only a single command needs to be run, the list format
is not needed and can be included on the same line:</p>
<codeblock>
  <codeph>hooks:
  post-staging: python staging.py
  pre-running:  python running.py
</codeph>
</codeblock>
</section>
<section id="drain"> <title>drain:</title>
<p>
<xref href="../../../../devplatform/helion/user/deploy/1.0app-logs.dita#application-logs-drain" type="section"  >
<i>Application log drains</i>
</xref> can be
added to an application when it is deployed by describing them in a
<codeph>drain:</codeph> block with a drain name and URL:</p>
<codeblock>
  <codeph>drain:
  drain_name: protocol://host.domain.tld:port/
</codeph>
</codeblock>
<p>To enable JSON logging, specify the URL separately along with a
<codeph>json: true</codeph> line:</p>
<codeblock>
  <codeph>drain:
  drain_name:
    url: protocol://host.domain.tld:port/
    json: true
</codeph>
</codeblock>
<p>For example:</p>
<codeblock>
  <codeph>drain:
  mytestdrain: udp://logs.loggly.com:12346/
  otherdrain:
    url: tcp://logs.papertrailapp.com:12345/
    json: true
</codeph>
</codeblock>
</section>
<section id="min-version"> <title>min_version:</title>
<p>Sets requirements for the minimum version of the client and server under
which the app will run.</p>
</section>
<section id="client"> <title>client:</title>
<p>The minimum version of the Application Lifecycle Service client needed to manage the app.</p>
<p>To determine the client version, use:</p>
<codeblock>
  <codeph>$ helion version

helion 0.3.13.0.18
</codeph>
</codeblock>
<p>Example:</p>
<codeblock>
  <codeph>min_version:
  client: 0.3.13.0.18
</codeph>
</codeblock>
</section>
<section id="server"> <title>server:</title>
<p>The minimum version of the Application Lifecycle Service server needed to run the app.</p>
</section>
<section id="key-substitution"> <title>Key Substitution</title>
<p>The value of any key in <i>manifest.yml</i> can be inserted in other keys
using the \${<i>key</i>} syntax. For example:</p>
<codeblock>
  <codeph>name: example-app
env:
  MY_NAME: ${name}
</codeph>
</codeblock>
<p>This defines a "MY_NAME" environment variable with the value
"example-app".</p>
<p>A small number of keys are predefined for your use within
<i>manifest.yml</i>:</p>
<codeblock>
  <codeph>  ------------------------------------------------------------------------
  key
  substitution
  value
  -------------- ---------------------------------------------------------
  \${random-word \${target-base}
  }              The hostname of the targeted Application Lifecycle Service system, for
  A short        example **helion-xxxx.local**
  alphanumeric   
  string of      
  random         
  characters     
  ------------------------------------------------------------------------
</codeph>
</codeblock>
<p>
  <b>Note</b>
</p>
<p>See the <xref type="section" href="#topic20805/services">
<i>services</i>
</xref> section for an example of
variable key substitution for yaml key names.</p>
</section>
</body>
</topic>
