<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_t3w_fnh_ts">
  <title>HPE Helion 2.0 Development Platform: Install the Messaging Service</title>
  <body>
    <p>This section provides details on installing the Messaging service for the Development
      Platform.</p>
    <section>
      <title>Prerequisites</title>
      <p>
        <ul>
          <li>The HDP Installer 2.0, also known as HDPI, must already <xref
              href="devplatform_install_platform.dita#topic_gly_xmh_ts">be installed</xref>.</li>
          <li>A properly configured <xref href="install_cloudsyaml.dita#topic_wzw_r4w_rt"
              >clouds.yaml</xref> file.</li>
          <li>HPE Helion OpenStack 2.0 installation must be completed. </li>
          <li>You must know the NTP server and DNS server IP addresses.</li>
        </ul>
      </p>
    </section>
    <section><title>Installation</title>
      <ol>
            <li>SSH into the HP Helion OpenStack deployer. (This is the same location where the HDPI
          has been installed.)</li>
        <li>List all services available for download.
            <codeblock>openstack --os-cloud mycloud hdpi list</codeblock><p>The output will
            look similar to the following. Make a note of the ID of the Messaging service that you
            intend to
          install.</p><codeblock>+--------------------+----------------+-----------+-----------+
| service            |     id         |  version  |   state   |
+--------------------+----------------+-----------+-----------+
| database       | wscatalog.#### | 1.0.0  | available |
<b>| messaging          | wscatalog.#### | 1.0.0     | available |</b></codeblock></li>
        <li>Download and install the Messaging service
          package.<codeblock>(dev_platform_installer-devplat_installer-1.0.0)stack@hlm:~$ openstack --os-cloud mycloud hdpi messaging 

install --package &lt;provide ID of the messaging service: for example, wscatalog.2761></codeblock></li>
        
        <li>Launch the Messaging Deployer VM using the HDPI. <note>When the launch command indicates
            that it finished and provides the IP address for the Messaging Deployer VM, SSH into the
            Messaging Deployer VM and look for the <codeph>/home/stack/helion</codeph> directory.
            Once that directory has been created and populated, continue to the next step. Do
              <b>not</b> attempt to continue until the directory has been populated; this may take a
            few minutes after the launch command indicates that it has completed.
          </note><codeblock>(dev_platform_installer-devplat_installer-1.0.0)stack@hlm:~$ openstack --os-cloud mycloud hdpi messaging launch </codeblock></li>
        <li>Log in to and Initialize the Messaging Deployer VM<ol id="ol_nr4_nqr_wt">
            <li>SSH into the Messaging Deployer VM using the IP address provided after the launch
              command completed.</li>
            <li>Copy the <codeph>msgaas</codeph> deployment model.<note>The <codeph>cp</codeph>
                command must be used <b>exactly</b> as shown - including the /* on the end of the
                example model path.
              </note><codeblock>stack@messaging-deployer:~/msgaas-1.0.0-rc1$ cd ~/helion/
stack@messaging-deployer:~/helion$ cp -r examples/msgaas/* my_cloud/definition/
stack@messaging-deployer:~/helion$ cp ~/platform-pass-through.yml my_cloud/definition/data/pass-through/platform-pass-through.yml</codeblock></li>
            <li>Using Git, persist the input model that you are about to deploy with. This
              information is required for the Pre-Install playbook, which is executed later in this
              installation
              process.<codeblock>stack@messaging-deployer:~/helion$ git add -A
stack@messaging-deployer:~/helion$ git commit -a -m "Add MSGaaS Default Model"</codeblock></li>
            <li id="customize">Change to the default values in order to customize the deployment
              model. Do not skip this step or the installation playbooks may not execute as expected
              in your
              environment.<codeblock># Open the cloudConfig.yml file and provide appropriate NTP/DNS server IP addresses
# If you are not sure, use the IP addresses of the HP Helion OpenStack control plane nodes

stack@messaging-deployer:~/helion$ cd my_cloud/definition/
stack@messaging-deployer:~/helion/my_cloud/definition$ ls
cloudConfig.yml  data
stack@messaging-deployer:~/helion/my_cloud/definition$ nano cloudConfig.yml    # this is the file where the changes need to be made</codeblock></li>
            <li>Navigate to and edit the <codeph>network_groups.yml</codeph> file.<note>This step is
                optional. Perform this step only in support ot TLS (Cue API public endpoint URL with
                SSL support
              (https))</note><codeblock># comment out 'external-name:' field, 
# add 'msgaas-cert'for'cert-file:' field,
# uncomment 'tls-components:'list and comment out 'components:' list 

stack@messaging-deployer:~/helion/my_cloud/definition$ cd data
stack@messaging-deployer:~/helion/my_cloud/definition/data$ nano network_groups.yml </codeblock></li>
            <li>Using Git, persist these changes. This information is required for the Pre-Install
              playbook, which is executed later in this installation
              process.<codeblock>stack@messaging-deployer:/helion/my_cloud/definition/data/pass-through$ cd ~/helion
stack@messaging-deployer:~/helion$ git commit -a -m "Configured Deployment Model"</codeblock></li>
          </ol></li>
        <li>Run the Playbooks <note type="important">After each playbook runs, both
              <codeph>unreachable</codeph> and <codeph>failed</codeph> should be zero (0). This
            indicates success. If not, check the output for error messages, address the errors, and
            try running the playbook again.</note><ol>
            <li> Run the Pre-Install Playbook<note> If the External Network is not named
                  <codeph>ext-net</codeph>, update the value of the <b>external_net_name</b>
                variable in
                  <codeph>~/helion/hos/ansible/roles/openstack-operations/defaults/main.yml</codeph>
                to the correct
                value.</note><codeblock>stack@messaging-deployer:~/helion$ source ~/user.osrc
stack@messaging-deployer:~/helion$ cd hos/ansible/
stack@messaging-deployer:~/helion/hos/ansible$ ansible-playbook -i hosts/localhost hlm-pre-install.yml </codeblock><p>The
                output should look similar to the
              following:</p><codeblock>PLAY RECAP ********************************************************************
openstack-operations | preinstall | Create service ports ---------------- 5.14s
openstack-operations | lookup-keystone-ids | Lookup Project ID ---------- 2.98s
openstack-operations | preinstall | Ensure SVC Network Exists ----------- 2.75s
openstack-operations | preinstall | Ensure External Network Exists ------ 2.73s
openstack-operations | preinstall | Create Floating IPs necessary for load-balancers --- 2.17s
openstack-operations | preinstall | Identify pre-existing floating IPs --- 2.07s
openstack-operations | preinstall | Set Neutron Quotas ------------------ 2.07s
openstack-operations | preinstall | Set Cinder Quotas ------------------- 2.01s
openstack-operations | preinstall | Create Virtual IPs necessary for load-balancers externally managed --- 1.81s
openstack-operations | preinstall | Set Nova Quotas --------------------- 1.77s
-------------------------------------------------------------------------------
Total: ----------------------------------------------------------------- 27.45s
localhost                  : ok=20   changed=14  <b> unreachable=0 </b>  <b> failed=0 </b></codeblock></li>
            <li>Configure the Input Model for TLS Support (optional)<note>This step is required to
                enable access to the Cue public endpoint URL with SSL support (https). The
                deployment model <xref href="#topic_t3w_fnh_ts" format="dita">customization</xref>
                performed previously must have included the TLS configuration step.</note><ol>
            <li>Copy your signed certificate into
                <codeph>~/helion/my_cloud/config/tls/certs/msgaas-cert</codeph></li>
            <li>Using Git, commit the
                  changes.<codeblock>stack@messaging-deployer:~/helion/hos/ansible$ git add -A
stack@messaging-deployer:~/helion/hos/ansible$ git commit -a -m "Configured Deployment Model"</codeblock></li></ol></li>
            <li>Run the Config Processor Playbook
                  <codeblock>stack@messaging-deployer:~/helion/hos/ansible$ ansible-playbook -i hosts/localhost config-processor-run.yml </codeblock><p><note>If
                  you have performed a full installation previously, you <b>must</b> remove the Cue
                  user and service from Keystone <b>before</b> running this playbook again. <ul
                    id="ul_rsf_tfs_wt">
                    <li> SSH into the HOS deployer, source the keystone.osrc file, and then execute
                      these
                      commands:<codeblock>openstack service delete cue
openstack user delete cue </codeblock></li>
                  </ul></note>Successful output should look similar to the following.
              </p><codeblock>PLAY RECAP ******************************************************************** 
config-processor | run-config-processor | Run Configuration Processor over the given cloud configuration --- 2.44s
git-operations | _assemble-working-directory | Assemble scratch content --- 0.76s
git-operations | _persist-to-git | Prep new commit ---------------------- 0.69s
config-processor | configure | Sync ansible vars for cloud deployment --- 0.67s
config-processor | add-localhost | Add localhost group entry ------------ 0.55s
config-processor | configure | Make directories required for osconfig network configuration --- 0.33s
config-processor | configure | Sync generated network artefacts for cloud deployment/update --- 0.32s
config-processor | configure | Copy hosts.hf for osconfig playbooks ----- 0.28s
config-processor | configure | Copy ansible hosts file for cloud deployment (verb_hosts) --- 0.28s
config-processor | add-localhost | Add localhost group ------------------ 0.17s
-------------------------------------------------------------------------------
Total: ------------------------------------------------------------------ 7.99s
localhost                  : ok=21   changed=14   <b>unreachable=0  </b>  <b>failed=0  </b>      </codeblock></li>
            <li>Run the Ready Deployment
                Playbook<codeblock>stack@messaging-deployer:~/helion/hos/ansible$ ansible-playbook -i hosts/localhost ready-deployment.yml </codeblock><p>Successful
                output should look similar to the following. <note>Ignore the TASK/msg message at
                  the end of the output. Do not run the playbook as indicated; that playbook must be
                  run later in the installation
              process.</note></p><codeblock>PLAY RECAP ******************************************************************** 
git-operations | _assemble-working-directory | Assemble scratch content --- 0.73s
config-processor | configure | Sync ansible vars for cloud deployment --- 0.54s
config-processor | configure | Sync ansible vars for cloud deployment --- 0.49s
git-operations | _promote-from-staging | Update branches ---------------- 0.41s
config-processor | configure | Make directories required for osconfig network configuration --- 0.30s
config-processor | configure | Make directories required for osconfig network configuration --- 0.27s
config-processor | configure | Sync generated network artefacts for cloud deployment/update --- 0.26s
config-processor | configure | Sync generated network artefacts for cloud deployment/update --- 0.25s
config-processor | configure | Copy ansible hosts file for cloud deployment (verb_hosts) --- 0.24s
config-processor | configure | Copy hosts.hf for osconfig playbooks ----- 0.22s
-------------------------------------------------------------------------------
Total: ------------------------------------------------------------------ 5.96s
localhost                  : ok=20   changed=11   <b>unreachable=0 </b>   <b>failed=0   </b>

TASK: [git-operations | ready-deployment-tree-help | Tell the user what to expect] ***
ok: [localhost] => {
    "msg": "The directory /home/stack/scratch/ansible/next/hos/ansible contains a prepared ansible tree 
ready to run your deployment. You should cd into that directory and run: ansible-playbook -i
hosts/verb_hosts site.yml"
}</codeblock></li>
            <li>Run the Boot Infrastructure Playbook <note>This step takes approximately 5
                minutes.</note> Once this is complete, all in-cloud infrastructure (VMs, Networks,
              Routers, Floating IPs, ports, security groups, etc) will have been created.
                <codeblock>stack@messaging-deployer:~/helion/hos/ansible$ cd ~/scratch/ansible/next/hos/ansible
stack@messaging-deployer:~/scratch/ansible/next/hos/ansible$ ansible-playbook -i hosts/localhost hlm-boot-infra.yml </codeblock><p>Successful
                output should look similar to the
              following:</p><codeblock>PLAY RECAP ********************************************************************
openstack-operations | create_instance | Create controlplane instance - 227.92s
openstack-operations | create_instance | Give cloud-init time to fetch SSH keys -- 60.07s
openstack-operations | create_security_groups | Create tcp/icmp security groups rules -- 34.59s
openstack-operations | create_instance | Extract port-id --------------- 19.89s
openstack-operations | create_instance | Wait for SSH to become active -- 17.46s
openstack-operations | create_port | Update ports to include appropriate security group(s) -- 17.24s
openstack-operations | create_security_groups | Create security groups -- 16.18s
openstack-operations | create_port | Associate VIP to instance ports --- 14.85s
openstack-operations | create_port | Create instance ports ------------- 13.97s
openstack-operations | create_security_groups | Create other security groups rules (e.g. 112 protcol) --- 9.33s
-------------------------------------------------------------------------------
Total: ---------------------------------------------------------------- 471.97s
localhost                  : ok=35   changed=19   <b>unreachable=0</b>    <b>failed=0</b></codeblock></li>
            <li>Run the "Site" or Deployment Playbook <note type="caution">Unlike all the previous
                ansible plays, the inventory file supplied to this play is
                  <codeph>hosts/verb_hosts</codeph> and not
                <codeph>hosts/localhost</codeph></note><note>This step takes approximately 10 to 15
                minutes.
              </note><codeblock>stack@messaging-deployer:~/scratch/ansible/next/hos/ansible$ ansible-playbook -i hosts/verb_hosts site.yml</codeblock>
              Successful output should look similar to the following:<note> If this playbook does
                not run successfully, run it again before trying any more advanced
                troubleshooting.</note><codeblock>PLAY RECAP ******************************************************************** 
FND-MDB | start | Start MySQL ------------------------------------------ 85.62s
FND-MDB | install | Install MDB packages ------------------------------- 75.00s
rabbitmq | install | Install rabbitmq application ---------------------- 20.34s
rabbitmq | install | Install rabbitmq application ---------------------- 20.28s
rabbitmq | install | Install rabbitmq application ---------------------- 19.75s
DES-PDN | install | Install Power DNS packages ------------------------- 17.48s
FND-MDB | configure | Bootstrap MDB Master ----------------------------- 11.26s
logging-producer | configure | Setup config files for services that have subscribed for logging -- 10.87s
logging-producer | configure | Include default log files for centralized logging --- 9.83s
Install keepalived package ---------------------------------------------- 9.21s
-------------------------------------------------------------------------------
Total: ---------------------------------------------------------------- 611.95s
msgaas-msgaas-ccp-c1-m1-mgmt : ok=377  changed=190  unreachable=0    failed=0   
msgaas-msgaas-ccp-c1-m2-mgmt : ok=381  changed=194  unreachable=0    failed=0   
msgaas-msgaas-ccp-c1-m3-mgmt : ok=382  changed=196  unreachable=0    failed=0   
localhost                  : ok=34   changed=15   unreachable=0    failed=0   </codeblock></li></ol></li></ol></section>
    <section><title>Verifying the Installation</title>
      <ol>
           <li>If you have not configured TLS, you can run a basic verification command to test the
          installation. Since you have not yet created any clusters, this list of clusters will be
          empty, but it should also not return any error messages.
            <codeblock>stack@messaging-deployer:~/scratch/ansible/next/hos/ansible$ /opt/stack/service/cueclient/venv/bin/openstack message-broker cluster list</codeblock><note>If
              <codeph>ERROR: openstack Unauthorized (HTTP 401)</codeph> is received when trying to
            communicate with Cue (API), it is most likely that the Cue Keystone user has a different
            password than what was configured in cue.conf. This is usually caused by not deleting
            the Cue user and service from Keystone prior to re-deploying the Messaging Service.
            Synchronize the values by doing the following:<ol id="ol_t5m_2hs_wt">
              <li> SSH into one of the Cue controller nodes.</li>
              <li>Find the <codeph>/etc/cue/cue.conf</codeph> file</li>
              <li>Copy the value of the <b>admin_password</b> variable.</li>
              <li>Source <codeph>keystone.osrc</codeph></li>
              <li>Update the Cue user password in
                Keystone:<codeblock>openstack user set cue --password &lt;value of admin_password></codeblock></li>
            </ol></note></li>
        <li>If you have configured TLS, make sure that the Cue public endpoint begins with https and
          not just http:<codeblock>openstack catalog list</codeblock></li>
          </ol>
      </section>
    
  </body>
</topic>
