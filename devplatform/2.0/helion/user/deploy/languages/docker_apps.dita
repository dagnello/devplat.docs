<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_l4n_y3n_xs">
  <title>HPE Helion 2.0 Development Platform: Deploying Docker Apps</title>
  <body>
    <section>
  <p> Docker images can be deployed in much the same way as source code, either directly from the
        Docker Hub or from specific Docker registry servers.</p>
      <p>The command
        is:<codeblock>helion push -n --docker-image my.registry.com/namespace/app-name:latest</codeblock>
        ALS will fetch the named image from the Docker Hub or specified registry server and deploy
        it. These are called Docker Apps. </p></section><section><title>Permission to Push Docker Apps</title>
          
   <p> Since arbitrary Docker images could potentially expose a root user and other escalated
        privileges, administrators will generally restrict the ability to push Docker images to: <ul>
          <li> a trusted group of users in an Org with 'sudo' permissions enabled</li>
          <li>a trusted list of Docker images, namespaces, or registry servers</li>
          <li>a trusted group deploying from a trusted list </li>
        </ul></p>  <p>Depending on which restrictions your administrator has set, you may see an error describing the
        restriction if you attempt an unauthorized push.</p>
      <p>Pushing as an unauthorized user:
        <codeblock> Error staging: Need 'allow_sudo' quota to stage and run a Docker app (400)</codeblock>Pushing
        an unauthorized image:
        <codeblock> Error staging: Docker image example/simple-server is not from an allowed registry (400)</codeblock></p></section>
    <section id="pushingDockerApps"><title>Pushing Docker Apps</title> Official images in the Docker Hub library can be
      specified by <b>name</b>, with or without a tag::
      <codeblock>helion push --docker-image django:1.8-python2 </codeblock>Images from a particular
      user or organization can be specified with the
      <b>namespace</b>:<codeblock>helion push --docker-image cloudfoundry/lattice-app</codeblock>Images
      from a particular registry server require a<b> fully-qualified URL</b>, without the protocol
      portion:
      <codeblock>helion push --docker-image registry.example.com/user/docker-app:latest</codeblock>If
      the registry you are using requires authentication, use the
        <codeph>&lt;user&gt;:&lt;pass&gt;@&lt;host&gt;</codeph> format to specify the credentials:
      <codeblock>helion push --docker-image myname:mypass@reg.example.com/myname/myapp</codeblock>Administrators
      may save default credentials for specific servers in the Allowed Registries list. If default
      credentials exist, they are used by default unless overridden. Any credentials you specify
      will override the default credentials.<note> If the registry credentials contain the '@' or
        ':' characters, <xref
          href="https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters"
          format="html" scope="external">URL encode</xref> the username or password strings as
        needed.</note></section> <section><title>Docker Apps and Data Services</title>
                    
         <p>Docker apps can be bound to <xref href="../../services/data-services.dita">data services</xref> just
            like staged apps. $VCAP_SERVICES and the URL-based
            environment variables are injected in the container and can be read by
            the application. See the <xref href="../../services/data-services.dita">data services</xref> 
              documentation for instructions on creating data service instances and
              binding them to applications.</p><p>
              
              Docker apps do not have <xref href="../manifestyml.dita#topic20922/hooks">staging hooks</xref>, so
                there is no opportunity to extract and reformat credentials into
                whatever format is expected by the Docker app. To work around this
                problem you can:</p>
                <ul>
                  <li>refactor the Docker app to consume the default service variables, or</li>
                  <li>bind the new service to a temporary app [for example, <xref
            href="https://github.com/Stackato-Apps/go-env" format="html" scope="external"
            >go-env</xref>] to find the service instance credentials. Once found, set the
          environment variables the Docker app expects through the web console, the client's <xref
            href="../../reference/environment.dita#topic7631"><codeph>--env</codeph>
            options</xref>, or in the manifest.yml file. </li>
                </ul>   
   </section> <section><title>Web Process and Exposed Ports</title><p>The <codeph>$PORT</codeph> environment
        variable exposed in staged apps is also available for Docker apps to use for web
        processes.</p> For example, a <codeph>Dockerfile</codeph> might end with the line:
      <codeblock>      ENTRYPOINT /usr/bin/python manage.py runserver 0.0.0.0:$PORT</codeblock> This
      will serve the web process on a port that has been automatically allocated by ALS. <p>If the
        app's Dockerfile exposes a <b>single</b> port; for example, <codeph>EXPOSE 8080</codeph> ALS
        will forward that port instead. </p><p>If there is<b> more than one</b> port exposed in the
        Dockerfile; however, the app will fail to deploy.</p>
    </section>                  
   
  </body>
</topic>
