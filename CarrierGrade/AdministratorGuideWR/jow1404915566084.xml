<?xml version="1.0" encoding="UTF-8"?>


<!DOCTYPE topic   PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" >


<topic id="jow1404915566084" xml:lang="en-us">


<!-- Modification History


    


-->


  <title>Sample Templates for HP Helion OpenStack Carrier Grade</title>


  <shortdesc >You can evaluate selected features of Heat using sample templates


    included with HP Helion OpenStack Carrier Grade. The samples also demonstrate some HP Helion OpenStack Carrier Grade


    extensions.</shortdesc>


  <prolog>


    <author >Jim Owens</author>


  </prolog>


  <body>


    <section id="section_N10022_N1001F_N10001" >


<!-- <p >The templates are available on WindShare as part of the HP Helion OpenStack Carrier Grade


        release. To use them, download and expand the SDK archive, and then untar the


          <b >wrs-heat-templates</b> tarball.</p> -->


    </section>


    <section id="section_N1002D_N1001F_N10001" >


      <title>HOT Templates—Simple</title>


      <p >The templates in the <filepath >hot/simple</filepath>


        directory use the OpenStack HOT Template File Format. Each template in this directory


        provides a simple example for an OpenStack Resource type, indicated by the


        filename.<!-- Is this a comprehensive list of available resource types? --></p>


      <table id="table_zq4_5nm_fp">


        <tgroup cols="2">


          <thead>


            <row>


              <entry >


                <p >Template file</p>


              </entry>


              <entry >


                <p >Description</p>


              </entry>


            </row>


          </thead>


          <tbody>


            <row>


              <entry >


                <p ><filepath >AWS_CloudFormation_Stack.yaml</filepath></p>


              </entry>


              <entry >


                <p >Specifies the URL of another Heat template that describes


                  additional resources. This allows Heat templates to be nested.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >OS_Ceilometer_Alarm.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a Ceilometer threshold alarm. This example illustrates


                  how to specify the name of an alarm meter, and how to set parameters such as the


                  threshold for triggering an alarm, the comparison operator to use, the evaluation


                  period for the comparison, and so on.</p>


                


              </entry>


            </row>


            


            <row>


              <entry >


                <p ><filepath >OS_Cinder_Volume.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a Cinder volume of a particular size (in gigabytes).</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >OS_Cinder_VolumeAttachment.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates an attachment, or mount point, for a Cinder volume within a VM instance.</p>


                


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >OS_Glance_Image.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a Glance image, specifying the image file, container


                  format, disk format, and so on.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >OS_Heat_AccessPolicy.yaml</filepath></p>


              </entry>


              <entry >


                <p >Specifies which types of resource to include in the results for <userinput >heat


                    stack-show <varname >stackname</varname></userinput> and <userinput >heat


                    resource-show <varname >stackname</varname>


                    <varname >resourcename</varname></userinput>.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >OS_Heat_CWLiteAlarm.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a threshold alarm using OS::Heat::CWLiteAlarm. 


                  This is an older and less capable alarm resource than OS::Ceilometer::Alarm. 


                  If possible, use OS::Ceilometer::Alarm instead. <!-- why might it not be possible? --></p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >OS_Heat_InstanceGroup.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a specified number of instances using a specified launch configuration.


                  The number of instances is controlled by the <parmname >size</parmname> property.


                  This invokes AWS::AutoScaling::LaunchConfiguration, which effectively restricts


                  the launched instances to AWS::EC2::Instance resources.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >OS_Neutron_FloatingIP.yaml</filepath></p>


              </entry>


              <entry ><p >Creates a floating IP address for an external tenant network, in order to represent an internal port IP address using NAT.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >OS_Neutron_Net.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a tenant network, to which other resources such as 


                  OS::Neutron::Port, OS::Neutron::Subnet, and OS::Nova::Server


                  can refer.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >OS_Neutron_Port.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a port for a VM instance on a tenant network. The VM


                  instance can use this to attach to the tenant network.</p>


              </entry>


            </row>


            


            <row>


              <entry >


                <p ><filepath >OS_Neutron_ProviderNet.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a provider network, specifying the name and type (flat


                  or vlan).</p>


              </entry>


            </row>


            


            <row>


              <entry >


                <p ><filepath >OS_Neutron_ProviderNetRange.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a segmentation range for a provider network, specifying


                  the provider network, and the minimum and maximum  values of the range.</p>


              </entry>


            </row>


            


            <row>


              <entry >


                <p ><filepath >OS_Neutron_QoSPolicy.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a Neutron QoS policy, which specifies a packet


                  scheduling weight. The policy can be referenced by a tenant network to modify the


                  scheduling weight of AVS ingress traffic from VMs for the tenant network.</p>


              </entry>


            </row>


            


            <row>


              <entry >


                <p ><filepath >OS_Neutron_Router.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates an IP router for tenant networks. The router's IP interfaces


                  to tenant network subnets are established as shown in


                  OS_Neutron_RouterInterface.yaml.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >OS_Neutron_RouterGateway.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a router gateway interface for the specified router on


                  the specified external network. The IP address for the interface is allocated from


                  the external network’s subnet, and a default IP route is created using the


                    <parmname >gateway_ip</parmname> of the subnet.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >OS_Neutron_RouterInterface.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates an IP interface on an existing router for an existing IP subnet.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >OS_Neutron_SecurityGroup.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a Security Group that defines a stateless IP Filter.


                  This Security Group can be referenced by a Server (VM) resource that requires a


                  stateless IP Filter for ingress and egress traffic to or from the VM.</p>


              </entry>


            </row>


            


            <row>


              <entry >


                <p ><filepath >OS_Neutron_Subnet.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates an IP subnet on a specified tenant network. 


                  The IP subnet and mask are required, 


                  and the DHCP support status (enabled or disabled) must be specified


                  <!-- double-check that it can be in the disabled state -->. DNS


                  nameservers can optionally be specified.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >OS_Nova_Flavor.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a Nova flavor that describes the resource requirements


                  for a VM, such as the required RAM, number of vCPUs, disk size, and so on.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >OS_Nova_KeyPair.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a secure shell (SSH) key pair to enable secure login to


                  a launched VM. The created key pair is referenced in OS::Nova::Server.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >OS_Nova_Server.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a VM Instance, specifying flavor, image and network attachments.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >OS_Nova_ServerGroup.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a <term >server group</term>, which is a


                  set of VM instances (OS::Nova::Server) that can be assigned group attributes such


                  as compute-node-affinity or anti-affinity. To assign a VM instance to a server


                  group, use NovaSchedulerHints within the OS::Nova::Server resource; for example,


                    <userinput >NovaSchedulerHints: [{Key: 'group', Value: {Ref:


                      <varname >server_group_name</varname>}}]</userinput>.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >OS_SysInv_HostInterface.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a Layer 2 interface on a compute node, specifying the


                  compute node, the interface type (eth or lag), the port or ports, the network type


                  (mgmt, oam, infra, or data), and for a data network, the provider networks. </p>


              </entry>


            </row>


            


          </tbody>


        </tgroup>


      </table>


    </section>


    <section id="section_N10235_N1001F_N10001" >


      <title>HOT Templates—Scenarios</title>


      <p >The templates in the <filepath >hot/scenarios</filepath>


        directory use the OpenStack HOT Template File Format. Each template in this directory


        provides an example scenario involving several Resource types.</p>


      <table id="table_ghj_nh5_fp">


        <tgroup cols="2">


          <thead>


            <row>


              <entry >


                <p >Template file</p>


              </entry>


              <entry >


                <p >Description</p>


              </entry>


            </row>


          </thead>


          <tbody>


            


            <row>


              <entry >


                <p ><filepath >BootFromCinder.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a bootable Cinder volume, and uses it to launch a VM


                  instance. The Cinder volume is used as the VM's virtual boot disk.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >DPDK_Flavors.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates four different flavors for DPDK-type guest


                  applications.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >Launch2NamedVMs.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a static service containing two virtual machines


                  attached to the same network. This template illustrates the HP Helion OpenStack Carrier Grade


                  extension for simplified VM instance naming, as described in <xref href="jow1404333807231.xml" />. The template is used as an


                  example in <xref href="jow1404333810324.xml" />.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >LabSetup.yaml</filepath></p>


              </entry>


              <entry >


                <p >Similar to <filepath >Provisioning.yaml</filepath>, but also


                  creates IP subnets on the tenant networks, routers on the tenant networks, and


                  router gateways.<!-- needs rewording? review the template when available --></p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >NetworkSetup.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates three tenant networks, five subnets, and two routers,


                  each with an external gateway interface and an internal interface.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >Provisioning.yaml</filepath></p>


              </entry>


              <entry >


                <p >Provisions a variety of resources, including provider networks,


                  segmentation ranges, tenant networks, key pairs, Glance images, and flavors, some


                  of which are implemented as a nested stack (by referencing another Heat template). </p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >SimpleServer.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a single VM instance. This template illustrates several


                  HP Helion OpenStack Carrier Grade extensions, incuding support for multiple


                  network attachments, the use of ‘name’ or subnet_name’ to refer to the network,


                  and the ability to specify the vif-model per network attachment (or NIC).</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >DemoAutoScaling.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates a single Load Balancer VM, and an AutoScalingGroup of


                  server VMs that scales based on link utilization. This demonstrates a typical


                  in/out autoscaling use case. The template also illustrates the use of the RAW


                  UserDataType to pass user data that does not require <i>cf_init</i> for parsing. </p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >VMAutoScaling.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates an up/down autoscaling service that responds to CPU load by adding or


                  removing vCPUs for a VM instance.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >NestedStack.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates an OS::Cinder::Volume, and an OS::Nova::Server resource that uses the


                  volume. This stack is used as a nested stack within the


                    <filepath >NestedAutoScale.yaml</filepath> template.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >NestedAutoScale.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates an autoscaling stack, using a nested stack. The stack NestedStack.yaml,


                  which contains a VM and its Cinder Volume, is scaled in and out.</p>


              </entry>


            </row>


          </tbody>


        </tgroup>


      </table>


    </section>


    <section id="section_N10285_N1001F_N10001" >


      <title>CFN Templates</title>


      <p >The templates in the <filepath >cfn</filepath> directory


        use the AWS Cloud Formation Template File Format.</p>


      <table id="table_uvt_sqm_fp">


        <tgroup cols="2">


          <thead>


            <row>


              <entry >


                <p >Template file</p>


              </entry>


              <entry >


                <p >Description</p>


              </entry>


            </row>


          </thead>


          <tbody>


            <row>


              <entry >


                <p ><filepath >AutoScaleWithNamePattern.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates an in/out autoscaling service with simplified names for


                  VM instances, using a HP Helion OpenStack Carrier Grade extension. The service responds to CPU load


                  as reported by a platform-generated metric.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >ComputeScale.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates an in/out autoscaling service that responds to CPU load


                  as reported by the compute node hosting the VM.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >CPUScale.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates an in/out autoscaling service that responds to CPU load


                  as reported by the guest VM, using a custom metric generated within the guest. For


                  more about this template, see <xref href="jow1404333812899.xml" />.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >MemScale.yaml</filepath></p>


              </entry>


              <entry >


                <p >Creates an in/out autoscaling service that responds to memory


                  usage as reported by the guest VM, using a custom metric generated within the


                  guest. To push the metric to the HP Helion OpenStack Carrier Grade platform, the guest must contain


                    <i>cloud-init</i> and <i>heat-cfntools</i>.</p>


              </entry>


            </row>


            <row>


              <entry >


                <p ><filepath >TenantScale.yaml</filepath></p>


              </entry>


              <entry >


                <p >Demonstrates the use of a parameter to supply user credentials.


                  This template can be run by a tenant user. It creates an in/out autoscaling


                  service that responds to CPU load as reported by the guest VM. To push the metric


                  to the HP Helion OpenStack Carrier Grade platform, the guest must contain <i>cloud-init</i> and <i>heat-cfntools</i>.</p>


              </entry>


            </row>


            


          </tbody>


        </tgroup>


      </table>


    </section>


  </body>


</topic>


